<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.finalProject.gym.dao.IMemberDAO">
  	<resultMap id="memResult" type="com.finalProject.gym.model.MemberVO" >
  		<result property="memId" column="memId"  />
  		<result property="memName" column="memName"  />
  		<result property="memNick" column="memNick"  />
  		<result property="memEmail" column="memEmail"  />
  		<result property="memJoinDate" column="memJoinDate"  />
  		<result property="memZipcode" column="memZipcode"  />
  		<result property="memAddress1" column="memAddress1"  />
  		<result property="memAddress2" column="memAddress2"  />
  		<result property="memImgNo" column="memImgNo"  />
  		<result property="pointX" column="pointX"  />
  		<result property="pointY" column="pointY"  />
  		<result property="memCtg" column="memCtg"  />
  		<result property="gymNo" column="gymNo"  />
  		<result property="gymName" column="gymName"  />
  		<result property="gymHp" column="gymHp"  />
  		<result property="gymPrice" column="gymPrice"  />
  	</resultMap>
  	
  	<!-- 회원등록 -->
  	<insert id="joinMember" parameterType="com.finalProject.gym.model.MemberVO">
  		INSERT member(memId, memPwd, memName, memEmail, memHp, memZipcode, memAddress1, memAddress2, memNick, memImgNo, pointX, pointY, gymNo, gymHp, gymName, gymPrice)						     
  	    VALUES(#{memId}, #{memPwd}, #{memName}, #{memEmail},#{memHp}, #{memZipcode}, #{memAddress1}, #{memAddress2}, #{memNick}, #{memImgNo}, #{pointX}, #{pointY}, #{gymNo}, #{gymHp}, #{gymName}, #{gymPrice})           
  	</insert>
  	
  	<!--Id 중복확인-->
  	<select id="joinMemIdCheck" parameterType="String" resultType="String">
  		select memId from member where memId = #{memId}
  	</select>
  	
  	<!--닉네임 중복확인-->
  	<select id="joinMemNickChk" parameterType="String" resultType="String">
  		select memNick from member where memNick = #{memNick}
  	</select>
  	
  	<!--로그인-->
  	<select id="login" parameterType="String" resultMap="memResult">
  		select memPwd, memNick, memEmail, memImgNo, gymNo from member where memId = #{memId}
  	</select>
  	
  	<!--마이페이지-->
  	<select id="getMemData" parameterType="String" resultMap="memResult">
  		select * from member where memId = #{memId}
  	</select>
  	
  	<!--마이페이지 이미지 업데이트-->
  	<update id="updateMemImgNo" parameterType="String">
  		update member set memImgNo=#{fileName} where memId = #{memId}
  	</update>
  	
  	<!--마이페이지 정보 업데이트-->
  	<update id="myPageUpdate" parameterType="com.finalProject.gym.model.MemberVO">
  		update member 
  		set memNick=#{memNick}, memHp=#{memHp}, memName=#{memName}, memEmail=#{memEmail}, memZipcode=#{memZipcode}, memAddress1=#{memAddress1}, memAddress2=#{memAddress2}, pointX=#{pointX}, pointY=#{pointY} 
  		where memId = #{memId}
  	</update>
  	
  	<!--회원탈퇴-->
  	<delete id="memDeleteAccount" parameterType="String">
  		delete from member where memId=#{memId};
  	</delete>
  	
  	<!--닉네임 가져오기-->
  	<select id="getMemNick" parameterType="String" resultType="String">
  		SELECT memNick
        FROM member
        WHERE memId = #{memId}
  	</select>

	<!--도장 번호 중복 체크-->
	<select id="gymNoChk" parameterType="String" resultType="String">
		SELECT gymNo
		FROM member
		WHERE gymNo = #{gymNo}
	</select>
	
	<!--체육관 회원 이름 가져오기-->
	<select id="getMyGymChildName" parameterType="String" resultType="com.finalProject.gym.model.ChildVO">
		SELECT c.childName, c.childNo, c.deadLine
		FROM child c
		JOIN member m ON m.gymName = c.gymName
		WHERE m.gymNo = #{gymNo}
		ORDER BY c.memId
	</select>
	
	<!--회원정보 가져오기-->
	<select id="getMemDateByChildNo" parameterType="String" resultType="com.finalProject.gym.model.ChildVO">
		SELECT c.*, m.memName, m.memHp, m.memAddress1, m.memAddress2
		FROM child c
		JOIN member m ON m.memId = c.memId		
		WHERE c.childNo = #{childNo}
	</select>
	
	<!--회원 이름 검색-->
	<select id="childNameSearch" parameterType="map" resultType="com.finalProject.gym.model.ChildVO">
		SELECT c.childName, c.childNo, c.deadLine
		FROM child c
		JOIN member m ON m.gymName = c.gymName
		WHERE m.memId = #{memId}
		AND childName LIKE CONCAT ('%', #{word}, '%')
		ORDER BY c.memId
	</select>
	
	<!--아이 띠 업데이트-->
	<update id="childBeltUpdate" parameterType="map">
		UPDATE child
		SET childBelt = #{childBelt}
		WHERE childNo = #{childNo}
	</update>
	
	<!--수상내역 가져오기-->
	<select id="getAwardContents" resultType="com.finalProject.gym.model.AwardVO">
		SELECT *
		FROM award
		WHERE childNo = #{childNo}
		ORDER BY getAwardDay DESC
		LIMIT 1 OFFSET #{offset}
	</select>
	
	<!--수상내역 개수 가져오기-->
	<select id="totalAwardPage">
		SELECT COUNT(*)
		FROM award
		WHERE childNo = #{childNo}
	</select>
	
	<!--수상내역 삭제-->
	<delete id="deletAward" parameterType="int">
		DELETE
		FROM award
		WHERE awardNo = #{awardNo}	
	</delete>
	
	<!--수상내역 추가-->
	<insert id="addAwardContents" parameterType="com.finalProject.gym.model.AwardVO">
		INSERT award (childNo, awardTitle, getAwardDay, ranking)
		VALUES (#{childNo}, #{awardTitle}, #{getAwardDay}, #{ranking})
	</insert>
	
	<!--수상내역 추가-->
	<select id="getChildNoJoinEvent" parameterType="int">
		SELECT childNo
		FROM order_pay
		WHERE eventNo = #{eventNo}
	</select>
	
	<!--내 아이 수상내역 가져오기-->
	<select id="getMyChildAward" parameterType="String" resultType="com.finalProject.gym.model.AwardVO">
		SELECT c.childName, c.childNo, a.awardNo, a.awardTitle, a.getAwardDay, a.ranking, c.gymName
		FROM award a
		JOIN child c ON c.childNo = a.childNo
		WHERE c.memId = #{memId};
		ORDER BY a.getAwardDay DESC, a.awardTitle
	</select>
  </mapper>
  
  
  
  
  